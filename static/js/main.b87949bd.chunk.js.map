{"version":3,"sources":["components/app/App.module.scss","constants/constants.ts","components/app/Food.ts","components/app/Grid.ts","components/app/Snake.ts","components/app/App.tsx","reportWebVitals.ts","index.tsx"],"names":["module","exports","ROWS","Math","floor","HEIGHT","COLS","WIDTH","Food","position","generatePosition","boundaries","snakePosition","isPositionGenerated","x","y","random","index","length","this","Grid","values","row","push","col","grid","ceil","value","Snake","startingPosition","currentPosition","direction","speed","reset","moveRight","shift","moveDown","moveLeft","moveUp","grow","tail","tailNeighbor","unshift","hasReachedSpeedCap","increaseSpeed","currentScore","title","appData","highestScoreLabel","lastScoreLabel","currentScoreLabel","startGame","inProgress","restartGame","App","props","timeoutID","timeout","appRef","snake","food","renderSnake","rows","renderFood","moveSnake","snakeTail","game","isGameOver","setState","isKeyPressed","clearTimeout","highestScore","state","lastScore","gameStatus","prevState","doRender","window","setTimeout","handleDirectionChange","event","key","handleGame","current","focus","renderGrid","map","rowIndex","className","styles","style","width","colIndex","height","classNames","React","createRef","buttonLabel","ref","tabIndex","onKeyDown","onClick","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b87949bd.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"app\":\"App_app__2I7Ip\",\"header\":\"App_header__3FcCA\",\"title\":\"App_title__1Q3k0\",\"container\":\"App_container__1sINv\",\"grid\":\"App_grid__3reeh\",\"grid-row\":\"App_grid-row__3QSIE\",\"grid-col\":\"App_grid-col__3nvgo\",\"field\":\"App_field__3Sc6B\",\"blank\":\"App_blank__3Hh2L\",\"snake\":\"App_snake__3bEZu\",\"food\":\"App_food__1B1Br\",\"details\":\"App_details__2JP0m\",\"score-container\":\"App_score-container__3oX6c\",\"score-label\":\"App_score-label___SN2p\",\"score\":\"App_score__jn5Zk\",\"button-container\":\"App_button-container__1cB6E\",\"button\":\"App_button__1sulJ\",\"button-idle\":\"App_button-idle__30JcN\",\"button-in-progress\":\"App_button-in-progress__16BBP\",\"button-game-over\":\"App_button-game-over__BUgVq\"};","// Global constant definitions\n\n// GRID CONSTANTS\n\n// The following values are in pixels\nexport const WIDTH = 1050;\nexport const HEIGHT = 572;\nexport const BLOCK_SIZE = 50;\n\nexport const ROWS = Math.floor(HEIGHT / BLOCK_SIZE);\nexport const COLS = WIDTH / BLOCK_SIZE;\n","import { Boundaries, Position } from \"types/types\";\n\n/**\n * Class Food.\n */\nexport class Food {\n    // VARIABLES\n\n    /**\n     * Food position.\n     */\n    position: Position | null;\n\n    // CONSTRUCTORS\n\n    /**\n     * Default constructor.\n     *\n     * Initializes food position.\n     */\n    constructor() {\n        this.position = null;\n    }\n\n    // METHODS\n\n    /**\n     * Generates a random food position.\n     * @param boundaries - boundaries where food can be generated\n     * @param snakePosition - current snake position\n     */\n    generatePosition = (boundaries: Boundaries, snakePosition: Position[]) => {\n        let isPositionGenerated = false;\n        let x = 0;\n        let y = 0;\n\n        while (!isPositionGenerated) {\n            x = Math.floor(Math.random() * (boundaries.x[1] - boundaries.x[0]) + boundaries.x[0]);\n            y = Math.floor(Math.random() * (boundaries.y[1] - boundaries.y[0]) + boundaries.y[0]);\n\n            for (let index = 0; index < snakePosition.length; index++) {\n                if (snakePosition[index].x === x && snakePosition[index].y === y) {\n                    break;\n                } else if (index === snakePosition.length - 1) {\n                    isPositionGenerated = true;\n                }\n            }\n        }\n\n        this.position = {\n            x,\n            y,\n        };\n    };\n}\n","import { Boundaries, Position } from \"types/types\";\nimport { COLS, ROWS } from \"constants/constants\";\n\n/**\n * Properties:\n *  - X - snake;\n *  - F - food;\n *  - B - blank cell.\n */\ntype GridValue = \"X\" | \"F\" | \"B\";\n\ntype GridType = {\n    position: Position;\n    value: GridValue;\n};\n\n/**\n * Class Grid.\n */\nexport class Grid {\n    // VARIABLES\n\n    /**\n     * Grid's boundaries.\n     */\n    boundaries: Boundaries;\n\n    /**\n     * Two dimensional array represented as a grid with each grid having its own position and value.\n     */\n    values: GridType[][];\n\n    // CONSTRUCTORS\n\n    /**\n     * Default constructor.\n     */\n    constructor() {\n        this.boundaries = {\n            x: [],\n            y: [],\n        };\n\n        this.values = [];\n\n        // Expand to have the correct amount of rows\n        for (let row = 0; row < ROWS; row++) {\n            this.values.push([]);\n        }\n\n        // Expand all rows to have the correct amount of columns\n        for (let row = 0; row < ROWS; row++) {\n            for (let col = 0; col < COLS; col++) {\n                const position: Position = {\n                    x: col + 1 - Math.ceil(COLS / 2),\n                    y: ROWS - 1 - row + 1 - Math.ceil(ROWS / 2),\n                };\n\n                const grid: GridType = {\n                    position,\n                    value: \"B\",\n                };\n\n                this.values[row].push(grid);\n            }\n        }\n\n        this.boundaries.x.push(this.values[0][0].position.x);\n        this.boundaries.x.push(this.values[0][COLS - 1].position.x);\n\n        this.boundaries.y.push(this.values[ROWS - 1][0].position.y);\n        this.boundaries.y.push(this.values[0][0].position.y);\n    }\n}\n","import { Position } from \"types/types\";\n\ntype Direction = \"right\" | \"down\" | \"left\" | \"up\";\n\nconst SPEED = 5; // initial speed value and speed increasing value\nconst SPEED_CAP = 80;\n\n/**\n * Snake Class.\n */\nexport class Snake {\n    // VARIABLES\n\n    /**\n     * Snake's starting position on the grid.\n     */\n    startingPosition: Position[];\n\n    /**\n     * Snake's current position on the grid.\n     */\n    currentPosition: Position[];\n\n    /**\n     * Snake's direction.\n     */\n    direction: Direction;\n\n    /**\n     * Snake's movement speed.\n     */\n    speed: number;\n\n    // CONSTRUCTORS\n\n    /**\n     * Default constructor.\n     *\n     * Initializes snake's position, length, direction and speed.\n     */\n    constructor() {\n        // Snake's starting length is 1\n        //\n        // First array element is the snake's tail\n        // Last array element is the snake's head\n        const startingPosition: Position[] = [\n            {\n                x: 0,\n                y: 0,\n            },\n        ];\n\n        this.startingPosition = [...startingPosition];\n        this.currentPosition = [...startingPosition];\n        this.direction = \"right\";\n        this.speed = SPEED;\n    }\n\n    // METHODS\n\n    /**\n     * Resets snake's necessary properties back to the initial values.\n     */\n    reset = () => {\n        this.currentPosition = [...this.startingPosition];\n        this.direction = \"right\";\n        this.speed = SPEED;\n    };\n\n    /**\n     * Moves snake to the right, removes snake's tail and returns it.\n     */\n    moveRight = () => {\n        this.currentPosition.push({\n            x: this.currentPosition[this.currentPosition.length - 1].x + 1,\n            y: this.currentPosition[this.currentPosition.length - 1].y,\n        });\n\n        return this.currentPosition.shift()!;\n    };\n\n    /**\n     * Moves snake down, removes snake's tail and returns it.\n     */\n    moveDown = () => {\n        this.currentPosition.push({\n            x: this.currentPosition[this.currentPosition.length - 1].x,\n            y: this.currentPosition[this.currentPosition.length - 1].y - 1,\n        });\n\n        return this.currentPosition.shift()!;\n    };\n\n    /**\n     * Moves snake to the left, removes snake's tail and returns it.\n     */\n    moveLeft = () => {\n        this.currentPosition.push({\n            x: this.currentPosition[this.currentPosition.length - 1].x - 1,\n            y: this.currentPosition[this.currentPosition.length - 1].y,\n        });\n\n        return this.currentPosition.shift()!;\n    };\n\n    /**\n     * Moves snake up, removes snake's tail and returns it.\n     */\n    moveUp = () => {\n        this.currentPosition.push({\n            x: this.currentPosition[this.currentPosition.length - 1].x,\n            y: this.currentPosition[this.currentPosition.length - 1].y + 1,\n        });\n\n        return this.currentPosition.shift()!;\n    };\n\n    /**\n     * Makes snake to grow longer.\n     */\n    grow = () => {\n        let direction: Direction = this.direction; // in which direction snake's end is moving\n\n        if (this.currentPosition.length > 1) {\n            // Snake's end\n            const tail = this.currentPosition[0];\n            const tailNeighbor = this.currentPosition[1];\n\n            // Snake's end moving vertically\n            if (tail.x === tailNeighbor.x) {\n                // Snake's end moving down\n                if (tail.y < tailNeighbor.y) {\n                    direction = \"down\";\n                }\n                // Snake's end moving up\n                else {\n                    direction = \"up\";\n                }\n            }\n            // Snake's end moving horizontally\n            else if (tail.y === tailNeighbor.y) {\n                // Snake's end moving right\n                if (tail.x < tailNeighbor.x) {\n                    direction = \"right\";\n                }\n                // Snake's end moving left\n                else {\n                    direction = \"left\";\n                }\n            }\n        }\n\n        switch (direction) {\n            case \"down\":\n                this.currentPosition.unshift({\n                    x: this.currentPosition[0].x,\n                    y: this.currentPosition[0].y + 1,\n                });\n\n                break;\n            case \"left\":\n                this.currentPosition.unshift({\n                    x: this.currentPosition[0].x + 1,\n                    y: this.currentPosition[0].y,\n                });\n\n                break;\n            case \"up\":\n                this.currentPosition.unshift({\n                    x: this.currentPosition[0].x,\n                    y: this.currentPosition[0].y - 1,\n                });\n\n                break;\n            default:\n                this.currentPosition.unshift({\n                    x: this.currentPosition[0].x - 1,\n                    y: this.currentPosition[0].y,\n                });\n        }\n    };\n\n    /**\n     * Determines whether snake has reached its speed cap.\n     */\n    hasReachedSpeedCap = () => {\n        return this.speed === SPEED_CAP;\n    };\n\n    /**\n     * Increases snake's speed based on game's current points.\n     * @param currentScore - game's current points\n     */\n    increaseSpeed = (currentScore: number) => {\n        this.speed = SPEED * (currentScore + 1);\n    };\n}\n","import { BLOCK_SIZE, COLS, HEIGHT, ROWS, WIDTH } from \"constants/constants\";\nimport React, { Component } from \"react\";\n\nimport { Food } from \"./Food\";\nimport { Grid } from \"./Grid\";\nimport { Position } from \"types/types\";\nimport { Snake } from \"./Snake\";\nimport appData from \"assets/data/app.json\";\nimport classNames from \"classnames\";\nimport styles from \"./App.module.scss\";\n\ntype GameStatus = \"idle\" | \"in-progress\" | \"game-over\";\n\ninterface Props {}\n\ninterface State {\n    /**\n     * Game's current points.\n     */\n    currentScore: number;\n\n    /**\n     * Last game's points.\n     */\n    lastScore: number;\n\n    /**\n     * Highest points.\n     */\n    highestScore: number;\n\n    /**\n     * Game status.\n     */\n    gameStatus: GameStatus;\n\n    /**\n     * Determines whether a key is pressed or not.\n     *\n     * Fixes the issue where by chaning directions\n     * too quickly snake can eat itself or turn\n     * 180 degrees.\n     */\n    isKeyPressed: boolean;\n\n    /**\n     * Determines whether to do a re-render or not.\n     *\n     * Used to display recent updates on the grid.\n     */\n    doRender: boolean;\n}\n\nconst {\n    title,\n    highestScoreLabel,\n    lastScoreLabel,\n    currentScoreLabel,\n    startGame,\n    inProgress,\n    restartGame,\n} = appData;\n\nconst INITIAL_TICKS = 850;\n\n/**\n * App component renders 2D Snake Game.\n */\nclass App extends Component<Props, State> {\n    /**\n     * setTimeout.\n     */\n    timeoutID = 0;\n\n    /**\n     * Timeout interval.\n     */\n    timeout = INITIAL_TICKS;\n\n    /**\n     * Ref for <div> element with className \"app\".\n     */\n    appRef;\n\n    /**\n     * Grid.\n     */\n    grid = new Grid();\n\n    /**\n     * Snake.\n     */\n    snake = new Snake();\n\n    /**\n     * Food.\n     */\n    food = new Food();\n\n    constructor(props: Props) {\n        super(props);\n\n        this.appRef = React.createRef() as React.MutableRefObject<HTMLDivElement>;\n\n        this.state = {\n            currentScore: 0,\n            lastScore: 0,\n            highestScore: 0,\n            gameStatus: \"idle\",\n            isKeyPressed: false,\n            doRender: false,\n        };\n    }\n\n    /**\n     * Resets grid and snake's properties.\n     */\n    reset = () => {\n        for (let row = 0; row < ROWS; row++) {\n            for (let col = 0; col < COLS; col++) {\n                this.grid.values[row][col].value = \"B\";\n            }\n        }\n\n        this.snake.reset();\n    };\n\n    /**\n     * Renders snake on the grid.\n     * @param snakePosition - snake's position on the grid\n     */\n    renderSnake = (snakePosition: Position[]) => {\n        for (let index = 0; index < snakePosition.length; index++) {\n            rows: for (let row = 0; row < ROWS; row++) {\n                for (let col = 0; col < COLS; col++) {\n                    if (\n                        snakePosition[index].x === this.grid.values[row][col].position.x &&\n                        snakePosition[index].y === this.grid.values[row][col].position.y\n                    ) {\n                        this.grid.values[row][col].value = \"X\";\n\n                        break rows;\n                    }\n                }\n            }\n        }\n    };\n\n    /**\n     * Renders food on the grid.\n     */\n    renderFood = () => {\n        if (this.food.position !== null) {\n            rows: for (let row = 0; row < ROWS; row++) {\n                for (let col = 0; col < COLS; col++) {\n                    if (\n                        this.food.position.x === this.grid.values[row][col].position.x &&\n                        this.food.position.y === this.grid.values[row][col].position.y\n                    ) {\n                        this.grid.values[row][col].value = \"F\";\n\n                        break rows;\n                    }\n                }\n            }\n        }\n    };\n\n    /**\n     * Moves snake on the grid.\n     * @param snakeTail - snake's tail\n     */\n    moveSnake = (snakeTail: Position) => {\n        rows: for (let row = 0; row < ROWS; row++) {\n            for (let col = 0; col < COLS; col++) {\n                if (\n                    snakeTail.x === this.grid.values[row][col].position.x &&\n                    snakeTail.y === this.grid.values[row][col].position.y\n                ) {\n                    this.grid.values[row][col].value = \"B\";\n\n                    break rows;\n                }\n            }\n        }\n    };\n\n    /**\n     * Game's main functionality can be found here.\n     */\n    game = () => {\n        let isGameOver = false;\n        let { x, y } = this.snake.currentPosition[this.snake.currentPosition.length - 1]; // snake's head\n\n        this.setState({\n            isKeyPressed: false,\n        });\n\n        // SNAKE'S MOVEMENT SECTION\n\n        switch (this.snake.direction) {\n            case \"down\":\n                if (y - 1 >= this.grid.boundaries.y[0]) {\n                    const snakeTail = this.snake.moveDown();\n\n                    this.moveSnake(snakeTail);\n                } else {\n                    isGameOver = true;\n                }\n\n                break;\n            case \"left\":\n                if (x - 1 >= this.grid.boundaries.x[0]) {\n                    const snakeTail = this.snake.moveLeft();\n\n                    this.moveSnake(snakeTail);\n                } else {\n                    isGameOver = true;\n                }\n\n                break;\n            case \"up\":\n                if (y + 1 <= this.grid.boundaries.y[1]) {\n                    const snakeTail = this.snake.moveUp();\n\n                    this.moveSnake(snakeTail);\n                } else {\n                    isGameOver = true;\n                }\n\n                break;\n            default:\n                if (x + 1 <= this.grid.boundaries.x[1]) {\n                    const snakeTail = this.snake.moveRight();\n\n                    this.moveSnake(snakeTail);\n                } else {\n                    isGameOver = true;\n                }\n        }\n\n        ({ x, y } = this.snake.currentPosition[this.snake.currentPosition.length - 1]);\n\n        // Check if snake has not eaten itself\n        //\n        // Works correctly, but appears buggy\n        for (let index = 0; index < this.snake.currentPosition.length - 1; index++) {\n            if (\n                x === this.snake.currentPosition[index].x &&\n                y === this.snake.currentPosition[index].y\n            ) {\n                isGameOver = true;\n\n                break;\n            }\n        }\n\n        if (!isGameOver) {\n            this.renderSnake(this.snake.currentPosition);\n\n            if (this.food.position !== null) {\n                if (this.food.position.x === x && this.food.position.y === y) {\n                    // SNAKE EATS SECTION\n\n                    this.setState(\n                        (prevState) => ({\n                            currentScore: prevState.currentScore + 1,\n                        }),\n                        () => {\n                            if (!this.snake.hasReachedSpeedCap()) {\n                                this.snake.increaseSpeed(this.state.currentScore);\n\n                                this.timeout -= this.snake.speed;\n                            }\n                        },\n                    );\n\n                    this.snake.grow();\n\n                    this.food.generatePosition(this.grid.boundaries, this.snake.currentPosition);\n\n                    this.renderSnake(this.snake.currentPosition);\n\n                    this.renderFood();\n                }\n            }\n\n            this.setState({\n                doRender: true,\n            });\n\n            this.timeoutID = window.setTimeout(() => {\n                this.game();\n            }, this.timeout);\n        } else {\n            // GAME OVER SECTION\n\n            clearTimeout(this.timeoutID);\n            let highestScore = this.state.highestScore;\n\n            if (this.state.currentScore > this.state.highestScore) {\n                highestScore = this.state.currentScore;\n            }\n\n            this.setState({\n                highestScore,\n                lastScore: this.state.currentScore,\n                gameStatus: \"game-over\",\n            });\n        }\n    };\n\n    /**\n     * onKeyDown event handler for chaning snake's direction.\n     * @param event - KeyboardEvent object\n     */\n    handleDirectionChange = (event: React.KeyboardEvent) => {\n        if (this.state.gameStatus === \"in-progress\" && !this.state.isKeyPressed) {\n            switch (event.key) {\n                case \"ArrowRight\":\n                    if (this.snake.direction === \"down\" || this.snake.direction === \"up\") {\n                        this.snake.direction = \"right\";\n                    }\n\n                    break;\n                case \"ArrowDown\":\n                    if (this.snake.direction === \"right\" || this.snake.direction === \"left\") {\n                        this.snake.direction = \"down\";\n                    }\n\n                    break;\n                case \"ArrowLeft\":\n                    if (this.snake.direction === \"down\" || this.snake.direction === \"up\") {\n                        this.snake.direction = \"left\";\n                    }\n\n                    break;\n                case \"ArrowUp\":\n                    if (this.snake.direction === \"right\" || this.snake.direction === \"left\") {\n                        this.snake.direction = \"up\";\n                    }\n\n                    break;\n                default:\n                    return;\n            }\n\n            this.setState({\n                isKeyPressed: true,\n            });\n        }\n    };\n\n    /**\n     * Click event handler for starting/restarting the game.\n     */\n    handleGame = () => {\n        if (this.state.gameStatus === \"idle\" || this.state.gameStatus === \"game-over\") {\n            if (this.appRef && this.appRef.current) {\n                this.appRef.current.focus();\n            }\n\n            if (this.state.gameStatus === \"game-over\") {\n                this.reset();\n            }\n\n            this.setState({\n                currentScore: 0,\n                gameStatus: \"in-progress\",\n            });\n\n            this.renderSnake(this.snake.startingPosition);\n\n            this.food.generatePosition(this.grid.boundaries, this.snake.startingPosition);\n\n            this.renderFood();\n\n            this.timeoutID = window.setTimeout(() => {\n                this.game();\n            }, this.timeout);\n        }\n    };\n\n    /**\n     * Renders the grid.\n     */\n    renderGrid = () => {\n        return this.grid.values.map((row, rowIndex) => (\n            <div key={rowIndex} className={styles[\"grid-row\"]} style={{ width: WIDTH }}>\n                {row.map((col, colIndex) => (\n                    <div\n                        key={colIndex}\n                        className={styles[\"grid-col\"]}\n                        style={{ width: BLOCK_SIZE, height: BLOCK_SIZE }}>\n                        {/* {col.value === \"B\" && <div className={styles[\"blank\"]} />}\n                        {col.value === \"X\" && <div className={styles[\"snake\"]} />}\n                        {col.value === \"F\" && <div className={styles[\"food\"]} />} */}\n                        <div\n                            className={classNames(\n                                styles[\"field\"],\n                                col.value === \"B\"\n                                    ? styles[\"blank\"]\n                                    : col.value === \"X\"\n                                    ? styles[\"snake\"]\n                                    : styles[\"food\"],\n                            )}\n                        />\n                    </div>\n                ))}\n            </div>\n        ));\n    };\n\n    render() {\n        const { currentScore, lastScore, highestScore, gameStatus } = this.state;\n        let buttonLabel = startGame;\n\n        if (gameStatus === \"in-progress\") {\n            buttonLabel = inProgress;\n        } else if (gameStatus === \"game-over\") {\n            buttonLabel = restartGame;\n        }\n\n        return (\n            <div\n                ref={this.appRef}\n                className={styles[\"app\"]}\n                tabIndex={0}\n                onKeyDown={this.handleDirectionChange}>\n                <div className={styles[\"header\"]}>\n                    <div className={styles[\"title\"]}>{title}</div>\n                </div>\n                <div className={styles[\"container\"]}>\n                    <div className={styles[\"grid\"]} style={{ height: HEIGHT }}>\n                        {this.renderGrid()}\n                    </div>\n                    <div className={styles[\"details\"]}>\n                        <div className={styles[\"score-container\"]}>\n                            <div className={styles[\"score-label\"]}>\n                                {`${highestScoreLabel}: `}\n                                <span className={styles[\"score\"]}>{highestScore}</span>\n                            </div>\n                            <div className={styles[\"score-label\"]}>\n                                {`${lastScoreLabel}: `}\n                                <span className={styles[\"score\"]}>{lastScore}</span>\n                            </div>\n                            <div className={styles[\"score-label\"]}>\n                                {`${currentScoreLabel}: `}\n                                <span className={styles[\"score\"]}>{currentScore}</span>\n                            </div>\n                        </div>\n                        <div className={styles[\"button-container\"]}>\n                            <button\n                                className={classNames(\n                                    styles[\"button\"],\n                                    styles[`button-${gameStatus}`],\n                                )}\n                                onClick={this.handleGame}>\n                                {buttonLabel}\n                            </button>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import \"./index.scss\";\n\nimport App from \"components/app/App\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\"),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}