{"version":3,"sources":["components/app/App.module.scss","constants/constants.ts","components/app/App.tsx","modules/grid.ts","reportWebVitals.ts","index.tsx"],"names":["module","exports","ROWS","Math","floor","HEIGHT","title","appData","highestScoreLabel","lastScoreLabel","currentScoreLabel","startGame","inProgress","restartGame","initialGridState","grid","row","push","col","WIDTH","initializeGrid","App","useState","currentScore","lastScore","highestScore","gameStatus","buttonLabel","className","styles","style","height","map","width","classNames","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mGACAA,EAAOC,QAAU,CAAC,IAAM,iBAAiB,OAAS,oBAAoB,MAAQ,mBAAmB,UAAY,uBAAuB,KAAO,kBAAkB,WAAW,sBAAsB,WAAW,sBAAsB,QAAU,qBAAqB,kBAAkB,6BAA6B,cAAc,yBAAyB,MAAQ,mBAAmB,mBAAmB,8BAA8B,OAAS,oBAAoB,cAAc,yBAAyB,qBAAqB,gCAAgC,mBAAmB,gC,uDCQ/hBC,EAAOC,KAAKC,MAAMC,O,8DCE3BC,EAOAC,EAPAD,MACAE,EAMAD,EANAC,kBACAC,EAKAF,EALAE,eACAC,EAIAH,EAJAG,kBACAC,EAGAJ,EAHAI,UACAC,EAEAL,EAFAK,WACAC,EACAN,EADAM,YAGEC,ECbwB,WAI1B,IAHA,IAAMC,EAAiB,GAGdC,EAAM,EAAGA,EAAMd,EAAMc,IAC1BD,EAAKE,KAAK,IAId,IAAK,IAAID,EAAM,EAAGA,EAAMd,EAAMc,IAC1B,IAAK,IAAIE,EAAM,EAAGA,EFPNC,GEOkBD,IAC1BH,EAAKC,GAAKC,KAAK,KAIvB,OAAOF,EDFcK,GAyEVC,EApEO,WAClB,MAAwCC,mBAAS,GAAjD,mBAAOC,EAAP,KACA,GADA,KACkCD,mBAAS,IAA3C,mBAAOE,EAAP,KACA,GADA,KACwCF,mBAAS,IAAjD,mBAAOG,EAAP,KACA,GADA,KACoCH,mBAAqB,SAAzD,mBAAOI,EAAP,KACA,GADA,KACwBJ,mBAASR,IAAjC,mBAAOC,EAAP,KACIY,GADJ,KACkBhB,GAEC,gBAAfe,EACAC,EAAcf,EACQ,cAAfc,IACPC,EAAcd,GAkBlB,OACI,sBAAKe,UAAWC,IAAM,IAAtB,UACI,qBAAKD,UAAWC,IAAM,OAAtB,SACI,qBAAKD,UAAWC,IAAM,MAAtB,SAAkCvB,MAEtC,sBAAKsB,UAAWC,IAAM,UAAtB,UACI,qBAAKD,UAAWC,IAAM,KAAUC,MAAO,CAAEC,ODtDnC,KCsDN,SAlBDhB,EAAKiB,KAAI,SAAChB,GAAD,OACZ,qBAAKY,UAAWC,IAAO,YAAaC,MAAO,CAAEG,MDtCpC,MCsCT,SACKjB,EAAIgB,KAAI,SAACd,GAAD,OACL,qBACIU,UAAWC,IAAO,YAClBC,MAAO,CAAEG,MDxCP,GCwC0BF,ODxC1B,gBCwDV,sBAAKH,UAAWC,IAAM,QAAtB,UACI,sBAAKD,UAAWC,IAAO,mBAAvB,UACI,sBAAKD,UAAWC,IAAO,eAAvB,oBACQrB,EADR,MAEI,sBAAMoB,UAAWC,IAAM,MAAvB,SAAmCJ,OAEvC,sBAAKG,UAAWC,IAAO,eAAvB,oBACQpB,EADR,MAEI,sBAAMmB,UAAWC,IAAM,MAAvB,SAAmCL,OAEvC,sBAAKI,UAAWC,IAAO,eAAvB,oBACQnB,EADR,MAEI,sBAAMkB,UAAWC,IAAM,MAAvB,SAAmCN,UAG3C,qBAAKK,UAAWC,IAAO,oBAAvB,SACI,wBACID,UAAWM,IACPL,IAAM,OACNA,IAAO,UAAD,OAAWH,KAHzB,SAKKC,gB,OEtEdQ,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,OCFdQ,EAASC,OACL,cAAC,IAAMC,WAAP,UACI,cAAC,EAAD,MAEJC,SAASC,eAAe,SAM5Bb,K","file":"static/js/main.899ccbd6.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"app\":\"App_app__2I7Ip\",\"header\":\"App_header__3FcCA\",\"title\":\"App_title__1Q3k0\",\"container\":\"App_container__1sINv\",\"grid\":\"App_grid__3reeh\",\"grid-row\":\"App_grid-row__3QSIE\",\"grid-col\":\"App_grid-col__3nvgo\",\"details\":\"App_details__2JP0m\",\"score-container\":\"App_score-container__3oX6c\",\"score-label\":\"App_score-label___SN2p\",\"score\":\"App_score__jn5Zk\",\"button-container\":\"App_button-container__1cB6E\",\"button\":\"App_button__1sulJ\",\"button-idle\":\"App_button-idle__30JcN\",\"button-in-progress\":\"App_button-in-progress__16BBP\",\"button-game-over\":\"App_button-game-over__BUgVq\"};","// Global constant definitions\n\n// GRID CONSTANTS\n\n// The following values are in pixels\nexport const WIDTH = 1050;\nexport const HEIGHT = 572;\nexport const BLOCK_SIZE = 50;\n\nexport const ROWS = Math.floor(HEIGHT / BLOCK_SIZE);\nexport const COLS = WIDTH / BLOCK_SIZE;\n","import { BLOCK_SIZE, HEIGHT, WIDTH } from \"constants/constants\";\nimport React, { useState } from \"react\";\n\nimport appData from \"assets/data/app.json\";\nimport classNames from \"classnames\";\nimport { initializeGrid } from \"modules/grid\";\nimport styles from \"./App.module.scss\";\n\ntype GameStatus = \"idle\" | \"in-progress\" | \"game-over\";\n\nconst {\n    title,\n    highestScoreLabel,\n    lastScoreLabel,\n    currentScoreLabel,\n    startGame,\n    inProgress,\n    restartGame,\n} = appData;\n\nconst initialGridState = initializeGrid();\n\n/**\n * App component renders ... .\n */\nconst App: React.FC = () => {\n    const [currentScore, setCurrentScore] = useState(0);\n    const [lastScore, setLastScore] = useState(0);\n    const [highestScore, setHighestScore] = useState(0);\n    const [gameStatus, setGameStatus] = useState<GameStatus>(\"idle\");\n    const [grid, setGrid] = useState(initialGridState);\n    let buttonLabel = startGame;\n\n    if (gameStatus === \"in-progress\") {\n        buttonLabel = inProgress;\n    } else if (gameStatus === \"game-over\") {\n        buttonLabel = restartGame;\n    }\n\n    const handleGame = () => {};\n\n    const renderGrid = () => {\n        return grid.map((row) => (\n            <div className={styles[\"grid-row\"]} style={{ width: WIDTH }}>\n                {row.map((col) => (\n                    <div\n                        className={styles[\"grid-col\"]}\n                        style={{ width: BLOCK_SIZE, height: BLOCK_SIZE }}\n                    />\n                ))}\n            </div>\n        ));\n    };\n\n    return (\n        <div className={styles[\"app\"]}>\n            <div className={styles[\"header\"]}>\n                <div className={styles[\"title\"]}>{title}</div>\n            </div>\n            <div className={styles[\"container\"]}>\n                <div className={styles[\"grid\"]} style={{ height: HEIGHT }}>\n                    {renderGrid()}\n                </div>\n                <div className={styles[\"details\"]}>\n                    <div className={styles[\"score-container\"]}>\n                        <div className={styles[\"score-label\"]}>\n                            {`${highestScoreLabel}: `}\n                            <span className={styles[\"score\"]}>{highestScore}</span>\n                        </div>\n                        <div className={styles[\"score-label\"]}>\n                            {`${lastScoreLabel}: `}\n                            <span className={styles[\"score\"]}>{lastScore}</span>\n                        </div>\n                        <div className={styles[\"score-label\"]}>\n                            {`${currentScoreLabel}: `}\n                            <span className={styles[\"score\"]}>{currentScore}</span>\n                        </div>\n                    </div>\n                    <div className={styles[\"button-container\"]}>\n                        <button\n                            className={classNames(\n                                styles[\"button\"],\n                                styles[`button-${gameStatus}`],\n                            )}>\n                            {buttonLabel}\n                        </button>\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default App;\n","import { COLS, ROWS } from \"constants/constants\";\n\nimport { Grid } from \"types/types\";\n\n/**\n *\n */\nexport const initializeGrid = (): Grid[][] => {\n    const grid: Grid[][] = [];\n\n    // Expand to have the correct amount of rows\n    for (let row = 0; row < ROWS; row++) {\n        grid.push([]);\n    }\n\n    // Expand all rows to have the correct amount of columns\n    for (let row = 0; row < ROWS; row++) {\n        for (let col = 0; col < COLS; col++) {\n            grid[row].push(\"B\");\n        }\n    }\n\n    return grid;\n};\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import \"./index.scss\";\n\nimport App from \"components/app/App\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\"),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}